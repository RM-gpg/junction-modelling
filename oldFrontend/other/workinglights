import { junctionDrawing } from "./junction.js";
import {
  drawNorthTrafficLight,
  drawEastTrafficLight,
  drawSouthTrafficLight,
  drawWestTrafficLight,
  drawNorthPuffinLight,
  drawEastPuffinLight,
  drawSouthPuffinLight,
  drawWestPuffinLight,
  drawNorthRightTurnLight,
  drawEastRightTurnLight,
  drawSouthRightTurnLight,
  drawWestRightTurnLight
} from "./trafficLights.js";

/* ============================================================
   Global State for Traffic Lights
============================================================ */
const trafficLightStates = {
  north: { red: true, amber: false, green: false },
  east:  { red: true, amber: false, green: false },
  south: { red: true, amber: false, green: false },
  west:  { red: true, amber: false, green: false }
};

const rightTurnLightStates = {
  north: { off: true, on: false },
  east:  { off: true, on: false },
  south: { off: true, on: false },
  west:  { off: true, on: false }
};

const pedestrianLightStates = {
  north: { off: true, on: false },
  east:  { off: true, on: false },
  south: { off: true, on: false },
  west:  { off: true, on: false }
};

/* ============================================================
   Sequence Timing Parameters (in ms)
============================================================*/
const VERTICAL_SEQUENCE_LENGTH = 12000;        // Cycle length for north/south
const HORIZONTAL_SEQUENCE_LENGTH = 15000;      // Cycle length for east/west
const VERTICAL_RIGHT_TURN_SEQUENCE_LENGTH = 2000;   // Extra vertical right-turn time
const HORIZONTAL_RIGHT_TURN_SEQUENCE_LENGTH = 2500; // Extra horizontal right-turn time

// Pedestrian times (not currently used)
const VERTICAL_PEDESTRIAN_SEQUENCE_LENGTH = 8000;
const HORIZONTAL_PEDESTRIAN_SEQUENCE_LENGTH = 9000;

/*==============================
  Canvas Resize
==============================*/
function updateCanvasSize() {
  const middleSection = document.getElementById("middle");
  const canvas = document.getElementById("junctionCanvas");
  canvas.width = middleSection.clientWidth;
  canvas.height = middleSection.clientHeight;
}

/* ============================================================
   Draw Traffic Lights
============================================================*/
function drawTrafficLights() {
  // Main traffic lights
  drawNorthTrafficLight(trafficLightStates.north);
  drawEastTrafficLight(trafficLightStates.east);
  drawSouthTrafficLight(trafficLightStates.south);
  drawWestTrafficLight(trafficLightStates.west);

  // Pedestrian lights (currently off)
  drawNorthPuffinLight(pedestrianLightStates.north);
  drawEastPuffinLight(pedestrianLightStates.east);
  drawSouthPuffinLight(pedestrianLightStates.south);
  drawWestPuffinLight(pedestrianLightStates.west);

  // Right-turn lights
  drawNorthRightTurnLight(rightTurnLightStates.north);
  drawEastRightTurnLight(rightTurnLightStates.east);
  drawSouthRightTurnLight(rightTurnLightStates.south);
  drawWestRightTurnLight(rightTurnLightStates.west);
}

/*==============================
  Main Animation Loop
==============================*/
function animate() {
  updateCanvasSize();
  junctionDrawing();

  drawTrafficLights();
  
  requestAnimationFrame(animate);
}

/* ============================================================
   Traffic Light Sequencing â€“ Separate Cycles
============================================================*/
// Vertical sequence (north/south)
function runVerticalSequence() {
  // t = 0: main lights red; right-turn off.
  trafficLightStates.north = { red: true, amber: false, green: false };
  trafficLightStates.south = { red: true, amber: false, green: false };
  rightTurnLightStates.north = { off: true, on: false };
  rightTurnLightStates.south = { off: true, on: false };

  setTimeout(() => {
    trafficLightStates.north = { red: true, amber: true, green: false };
    trafficLightStates.south = { red: true, amber: true, green: false };
  }, 500);

  setTimeout(() => {
    trafficLightStates.north = { red: false, amber: false, green: true };
    trafficLightStates.south = { red: false, amber: false, green: true };
  }, 1000);

  setTimeout(() => {
    trafficLightStates.north = { red: false, amber: true, green: false };
    trafficLightStates.south = { red: false, amber: true, green: false };
    rightTurnLightStates.north = { off: false, on: true };
    rightTurnLightStates.south = { off: false, on: true };
  }, VERTICAL_SEQUENCE_LENGTH - 3000);

  setTimeout(() => {
    trafficLightStates.north = { red: true, amber: false, green: false };
    trafficLightStates.south = { red: true, amber: false, green: false };
  }, VERTICAL_SEQUENCE_LENGTH - 2000);

  setTimeout(() => {
    waitForIntersectionClearOrTimeout(VERTICAL_RIGHT_TURN_SEQUENCE_LENGTH, () => {
      rightTurnLightStates.north = { off: true, on: false };
      rightTurnLightStates.south = { off: true, on: false };
    });
  }, VERTICAL_SEQUENCE_LENGTH);

  return VERTICAL_SEQUENCE_LENGTH;
}

// Horizontal sequence (east/west)
function runHorizontalSequence() {
  trafficLightStates.east = { red: true, amber: false, green: false };
  trafficLightStates.west = { red: true, amber: false, green: false };
  rightTurnLightStates.east = { off: true, on: false };
  rightTurnLightStates.west = { off: true, on: false };

  setTimeout(() => {
    trafficLightStates.east = { red: true, amber: true, green: false };
    trafficLightStates.west = { red: true, amber: true, green: false };
  }, 500);

  setTimeout(() => {
    trafficLightStates.east = { red: false, amber: false, green: true };
    trafficLightStates.west = { red: false, amber: false, green: true };
  }, 1000);

  setTimeout(() => {
    trafficLightStates.east = { red: false, amber: true, green: false };
    trafficLightStates.west = { red: false, amber: true, green: false };
    rightTurnLightStates.east = { off: false, on: true };
    rightTurnLightStates.west = { off: false, on: true };
  }, HORIZONTAL_SEQUENCE_LENGTH - 3000);

  setTimeout(() => {
    trafficLightStates.east = { red: true, amber: false, green: false };
    trafficLightStates.west = { red: true, amber: false, green: false };
  }, HORIZONTAL_SEQUENCE_LENGTH - 2000);

  setTimeout(() => {
    waitForIntersectionClearOrTimeout(HORIZONTAL_RIGHT_TURN_SEQUENCE_LENGTH, () => {
      rightTurnLightStates.east = { off: true, on: false };
      rightTurnLightStates.west = { off: true, on: false };
    });
  }, HORIZONTAL_SEQUENCE_LENGTH);

  return HORIZONTAL_SEQUENCE_LENGTH;
}

function runLightSequences() {
  // First run vertical
  runVerticalSequence();

  // After VERTICAL_SEQUENCE_LENGTH, run horizontal
  setTimeout(() => {
    runHorizontalSequence();
    // After HORIZONTAL_SEQUENCE_LENGTH, repeat
    setTimeout(runLightSequences, HORIZONTAL_SEQUENCE_LENGTH);
  }, VERTICAL_SEQUENCE_LENGTH);
}

function waitForIntersectionClearOrTimeout(timeout, callback) {
  setTimeout(callback, timeout);
}

window.addEventListener("load", () => {
  runLightSequences();
  updateCanvasSize();
  animate();
});
